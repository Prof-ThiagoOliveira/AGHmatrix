## plot.ancestral function and sub-functions

## Author: Rodrigo Rampazo Amadeu <rramadeu at gmail dot com>
## Create: 11-Aug-2014
## Last-Modified: 7-Oct-2014
## GPLv3 or later


#################################################################################################

## plot.ancestral function package- REQUIRES 'ggplot2'
## Give the data from data.treat function, individual name, the output from 'kinship.matrix', return the genealogy of this individual.

#data = data from function data.treat
#ind = individual name
#gen = the max number of generations of your plot
#inbreed = TRUE or FALSE
#big = use it for a better visualization
#matrix = output from kinship.matrix function
#fontsize = 3 default

#library("ggplot2")

ancestral <- function(data,ind,gen=10){
  #  data <- data.treat(data)
    index <- which(data$ind.data == ind)
   # chro <- c(index,data$sire[index],data$dire[index])#vector crono
    chro <- c(index)
    
    limit=2
    i=1
    while( limit <= gen){
        #print("loop")
        if(chro[i] == 0){
            chro[length(chro)+1]=0
        }else{
            chro[length(chro)+1] = data$sire[chro[i]]
        }
        
        if(chro[i] == 0){
            chro[length(chro)+1]=0
        }else{
            chro[length(chro)+1] = data$dire[chro[i]]
        }
        
        if( (length(chro)) == -(1-2^limit)){
            if( sum(tail(chro,n=2^(limit-1))) == 0){
               # go=FALSE
                cat("...  \n")
                cat(paste(ind,"has data until generation",limit-1))
                chro <- chro[-(length(chro):(1+length(chro)-2^(limit-1)))]
                return(chro)
            }
         #   print("no")
            limit=limit+1
        }
        if(limit >= gen){
            print(paste("Reached the limit of generations ",gen))  
            return(chro)            
        }
        i<-i+1
    }
}

#Makes the Cartesian grid
cartesian <- function(gen){
    xaxis <- c(0)
    yaxis <- c(0)
    for(i in 1:gen){
        xaxis <- c(xaxis,rep(i,2^i))
        yaxis <- c(yaxis,rev(seq(2^(i-1):1)),-seq((2^(i-1):1)))
    }
   # xaxis <- xaxis*100
    yaxis <- yaxis
    output<-cbind(xaxis,yaxis)
    return(output)
}

#Costumize the Cartesian grid for larger pedigrees
cartesian.big.plot <- function(x){
    index <- max(x$xaxis)
    x$count <- rep(1,nrow(x))
    big.gen <- big.gen.count <-c()
    for( i in 1:index){
        maxi <- sum(x$data.anc[which(x$xaxis==i)]!=0)
        big.gen.count <- c(big.gen.count,rep(maxi,maxi))
        big.gen <- c(big.gen,seq(1:maxi))
    }
    k=1
    for(i in 2:nrow(x)){
        if(x$data.anc[i] != 0){
            x$yaxis[i] <- big.gen[k]
            x$count[i] <- big.gen.count[k]
            k <- k+1
        }
    }
    x$yaxis <- max(big.gen)*(x$count-x$yaxis)/(x$count-1)
    x$yaxis[1] <- max(big.gen)/2
    x$max <- max(big.gen)[1]
 
#    x.fix <- rep(c(0,0.25,0.5), length.out=length(x$xaxis))
#    x$xaxis <- x$xaxis+x.fix
    return(x)
}
    
    
#Put the data in the cartesian grid        
cartesian.plot <- function(data.anc){
    gen <- log(length(data.anc)+1,base=2)-1
    plane <- cartesian(gen)
    matrix <- cbind(plane,data.anc)
 #   matrix <- matrix[-data.anc[length(data.anc):
#                               (length(data.anc)-2^gen)]]
    return(as.data.frame(matrix))
}

#Plot the graphic
plot.ancestral <- function(data=data,
                           ind,gen=20,
                           inbreed=TRUE,
                           big=TRUE,
                           matrix,
                           fontsize=3,
                           save.image=TRUE,
                           return.plot=TRUE){
x.anc <- ancestral(data,ind=ind,gen=gen)
if(!big)
  x<- cartesian.plot(x.anc)
if(big){
    x<- cartesian.big.plot(x)
    cat(paste("\n max ind per row:",x$max[1],"\n"))
    if(save.image)
      tiff(filename=paste(ind,".tiff",sep=""),height=21*(x$max[1]),width=21*(x$max[1]))
}
lines.plot <- x
data.plot <- x[x$data.anc!=0,]
data.plot$names <- data$ind.data[data.plot$data.anc]
if(inbreed){
    data.plot$inbreed <- round(diag(matrix)[data.plot$data.anc]-1,4)
}
                                        #attach(data.plot)

    p <- ggplot(data.plot, aes(x=xaxis,y=yaxis,label=names)) +
        xlab("Generations Ago") +
            ylab("")
j<-2
n <- length(lines.plot$data.anc)
for(i in 1:n){
        if(!is.na(lines.plot$data.anc[j]))
            if(lines.plot$data.anc[j]!=0){
                p <- p + geom_segment(x=lines.plot$xaxis[i],
                                      y=lines.plot$yaxis[i],
                                      xend=lines.plot$xaxis[j],
                                      yend=lines.plot$yaxis[j],
                                      color='gray')
            }
        if(!is.na(lines.plot$data.anc[j+1]))
            if(lines.plot$data.anc[j+1]!=0){
                p <- p +  geom_segment(x=lines.plot$xaxis[i],
                                       y=lines.plot$yaxis[i],
                                       xend=lines.plot$xaxis[j+1],
                                       yend=lines.plot$yaxis[j+1],
                                       color='gray')
            }
        j<-j+2
        
    }

p <- p +
    geom_point(colour='gray') +
            geom_text(size=fontsize,angle=0) + #change here for 90
                theme_bw() +
                    scale_x_continuous(breaks=1:gen) +
                        theme(axis.text.y = element_blank(),
                              axis.line.y=element_blank(),
                              panel.border=element_blank(),
                              panel.grid.major.y=element_blank(),
                              panel.grid.minor=element_blank(),
                              axis.ticks.y=element_blank())
if(inbreed)
    p <- p+geom_text(label=data.plot$inbreed,angle=0,vjust=2,size=fontsize,color="gray")

if(save.image){
  plot(p)
  dev.off()
}
if(return.plot)
  return(p)
}

#################################################################################################



