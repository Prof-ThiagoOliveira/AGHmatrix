// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// buildA_kerr_cpp
NumericMatrix buildA_kerr_cpp(IntegerVector s, IntegerVector d, double w, int v);
RcppExport SEXP _AGHmatrix_buildA_kerr_cpp(SEXP sSEXP, SEXP dSEXP, SEXP wSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(buildA_kerr_cpp(s, d, w, v));
    return rcpp_result_gen;
END_RCPP
}
// buildA_ploidy2_cpp
NumericMatrix buildA_ploidy2_cpp(IntegerVector sire, IntegerVector dire, int n);
RcppExport SEXP _AGHmatrix_buildA_ploidy2_cpp(SEXP sireSEXP, SEXP direSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type sire(sireSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dire(direSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(buildA_ploidy2_cpp(sire, dire, n));
    return rcpp_result_gen;
END_RCPP
}
// buildA_slater_cpp
NumericMatrix buildA_slater_cpp(IntegerVector s, IntegerVector d, double w);
RcppExport SEXP _AGHmatrix_buildA_slater_cpp(SEXP sSEXP, SEXP dSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(buildA_slater_cpp(s, d, w));
    return rcpp_result_gen;
END_RCPP
}
// buildDominanceMatrix_cpp
NumericMatrix buildDominanceMatrix_cpp(NumericMatrix A, IntegerVector s, IntegerVector d);
RcppExport SEXP _AGHmatrix_buildDominanceMatrix_cpp(SEXP ASEXP, SEXP sSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(buildDominanceMatrix_cpp(A, s, d));
    return rcpp_result_gen;
END_RCPP
}
// Gmatrix_Endelman
arma::mat Gmatrix_Endelman(const arma::mat& M, int ploidy);
RcppExport SEXP _AGHmatrix_Gmatrix_Endelman(SEXP MSEXP, SEXP ploidySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type ploidy(ploidySEXP);
    rcpp_result_gen = Rcpp::wrap(Gmatrix_Endelman(M, ploidy));
    return rcpp_result_gen;
END_RCPP
}
// Gmatrix_general_weighted
arma::mat Gmatrix_general_weighted(arma::mat Z, const arma::vec& weights, const double K);
RcppExport SEXP _AGHmatrix_Gmatrix_general_weighted(SEXP ZSEXP, SEXP weightsSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const double >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(Gmatrix_general_weighted(Z, weights, K));
    return rcpp_result_gen;
END_RCPP
}
// Gmatrix_MarkersMask
arma::mat Gmatrix_MarkersMask(const arma::mat& M);
RcppExport SEXP _AGHmatrix_Gmatrix_MarkersMask(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(Gmatrix_MarkersMask(M));
    return rcpp_result_gen;
END_RCPP
}
// Gmatrix_Slater
arma::mat Gmatrix_Slater(const arma::mat& M, const arma::vec& Frequency, const arma::mat& FreqP, const int NumberMarkers);
RcppExport SEXP _AGHmatrix_Gmatrix_Slater(SEXP MSEXP, SEXP FrequencySEXP, SEXP FreqPSEXP, SEXP NumberMarkersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Frequency(FrequencySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type FreqP(FreqPSEXP);
    Rcpp::traits::input_parameter< const int >::type NumberMarkers(NumberMarkersSEXP);
    rcpp_result_gen = Rcpp::wrap(Gmatrix_Slater(M, Frequency, FreqP, NumberMarkers));
    return rcpp_result_gen;
END_RCPP
}
// Gmatrix_Su
arma::mat Gmatrix_Su(const arma::mat& M);
RcppExport SEXP _AGHmatrix_Gmatrix_Su(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(Gmatrix_Su(M));
    return rcpp_result_gen;
END_RCPP
}
// Gmatrix_unweighted
arma::mat Gmatrix_unweighted(arma::mat Z, const double K);
RcppExport SEXP _AGHmatrix_Gmatrix_unweighted(SEXP ZSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const double >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(Gmatrix_unweighted(Z, K));
    return rcpp_result_gen;
END_RCPP
}
// Gmatrix_vanraden
arma::mat Gmatrix_vanraden(const arma::mat& M, const arma::vec& FreqP, const double denom);
RcppExport SEXP _AGHmatrix_Gmatrix_vanraden(SEXP MSEXP, SEXP FreqPSEXP, SEXP denomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type FreqP(FreqPSEXP);
    Rcpp::traits::input_parameter< const double >::type denom(denomSEXP);
    rcpp_result_gen = Rcpp::wrap(Gmatrix_vanraden(M, FreqP, denom));
    return rcpp_result_gen;
END_RCPP
}
// Gmatrix_VanRaden_weighted
arma::mat Gmatrix_VanRaden_weighted(const arma::mat& M, const arma::vec& weights, const arma::vec& FreqP, const double denom);
RcppExport SEXP _AGHmatrix_Gmatrix_VanRaden_weighted(SEXP MSEXP, SEXP weightsSEXP, SEXP FreqPSEXP, SEXP denomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type FreqP(FreqPSEXP);
    Rcpp::traits::input_parameter< const double >::type denom(denomSEXP);
    rcpp_result_gen = Rcpp::wrap(Gmatrix_VanRaden_weighted(M, weights, FreqP, denom));
    return rcpp_result_gen;
END_RCPP
}
// Gmatrix_Vitezica
arma::mat Gmatrix_Vitezica(arma::mat M, const arma::mat& FreqP);
RcppExport SEXP _AGHmatrix_Gmatrix_Vitezica(SEXP MSEXP, SEXP FreqPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type FreqP(FreqPSEXP);
    rcpp_result_gen = Rcpp::wrap(Gmatrix_Vitezica(M, FreqP));
    return rcpp_result_gen;
END_RCPP
}
// preprocessSNPmatrix
List preprocessSNPmatrix(NumericMatrix mat, double missingValue);
RcppExport SEXP _AGHmatrix_preprocessSNPmatrix(SEXP matSEXP, SEXP missingValueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< double >::type missingValue(missingValueSEXP);
    rcpp_result_gen = Rcpp::wrap(preprocessSNPmatrix(mat, missingValue));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_AGHmatrix_buildA_kerr_cpp", (DL_FUNC) &_AGHmatrix_buildA_kerr_cpp, 4},
    {"_AGHmatrix_buildA_ploidy2_cpp", (DL_FUNC) &_AGHmatrix_buildA_ploidy2_cpp, 3},
    {"_AGHmatrix_buildA_slater_cpp", (DL_FUNC) &_AGHmatrix_buildA_slater_cpp, 3},
    {"_AGHmatrix_buildDominanceMatrix_cpp", (DL_FUNC) &_AGHmatrix_buildDominanceMatrix_cpp, 3},
    {"_AGHmatrix_Gmatrix_Endelman", (DL_FUNC) &_AGHmatrix_Gmatrix_Endelman, 2},
    {"_AGHmatrix_Gmatrix_general_weighted", (DL_FUNC) &_AGHmatrix_Gmatrix_general_weighted, 3},
    {"_AGHmatrix_Gmatrix_MarkersMask", (DL_FUNC) &_AGHmatrix_Gmatrix_MarkersMask, 1},
    {"_AGHmatrix_Gmatrix_Slater", (DL_FUNC) &_AGHmatrix_Gmatrix_Slater, 4},
    {"_AGHmatrix_Gmatrix_Su", (DL_FUNC) &_AGHmatrix_Gmatrix_Su, 1},
    {"_AGHmatrix_Gmatrix_unweighted", (DL_FUNC) &_AGHmatrix_Gmatrix_unweighted, 2},
    {"_AGHmatrix_Gmatrix_vanraden", (DL_FUNC) &_AGHmatrix_Gmatrix_vanraden, 3},
    {"_AGHmatrix_Gmatrix_VanRaden_weighted", (DL_FUNC) &_AGHmatrix_Gmatrix_VanRaden_weighted, 4},
    {"_AGHmatrix_Gmatrix_Vitezica", (DL_FUNC) &_AGHmatrix_Gmatrix_Vitezica, 2},
    {"_AGHmatrix_preprocessSNPmatrix", (DL_FUNC) &_AGHmatrix_preprocessSNPmatrix, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_AGHmatrix(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
